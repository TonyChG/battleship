{"version":3,"sources":["bundle.js","game.js","utils.js"],"names":["Box","jquerySelector","this","box","isPlay","ship","className","randomNumber","min","max","Math","floor","random","initAttributGrid","$","each","n","String","index","attr","gridSize","parseInt","newGrid","nGrid","grid","putOneShip","x","y","dir","shipID","size","shipConst","coefX","coefY","i","coefTab","addShip","name","getPossibleDir","possibleDir","shipSize","forEach","value","clearGrid","gridID","color","getDir","firstX","firstY","clickX","clickY","check","onClickPositionPhase","saveX","saveY","dirTab","boatIsPut","length","computerPlay","randX","randY","play","onClickGamePhase","playerGrid","computGrid","clickOnPlayerGrid","click","push","displayGrid","possibleToPutShip","getSelectDir","randDir","putRandShips","maxLoop","mainGame","fn","isolatedScroll","options","defaults","autoscroll","extend","bind","e","outerHeight","scrollHeight","e0","originalEvent","delta","wheelDelta","detail","scrollTop","preventDefault","jQuery","window","load","console","log","flexslider","animation","selector","animationLoop","mousewheel","slideshow","slideshowSpeed","reverse","itemWidth","minItems","maxItems","move","itemMargin","start","slider","timer","wheeling","on","event","deltaX","deltaY","clearTimeout","target","getTarget","flexAnimate","setTimeout","div","data","addSlide","id","prototype","removeClass","addClass","clone","appendTo"],"mappings":"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","file":"bundle.js","sourcesContent":[null,"///////////////////\n// -BATTLESHIP-- //\n// Antoine Chiny //\n// Luc Terracher //\n//   - 2015 -    //\n///////////////////\n\n'use strict';\n\n// - Taille d'une grille\nconst gridSize  = 10;\n\n// - Ships constants\nconst shipConst = [\n  {'name':'aircraft-carrier', 'size':5, 'color':'#6E6E6E', 'id':0},\n  {'name':'battlecruiser', 'size':4, 'color':'#B18904', 'id':1},\n  {'name':'destroyer', 'size':3, 'color':'#298A08', 'id':2},\n  {'name':'submarine', 'size':3, 'color':'#61210B', 'id':3},\n  {'name':'torpedo', 'size':2, 'color':'#8A0829', 'id':4}\n];\n\n// - Tableau avec les coefficients des differentes directions\n// - i=0 -> TOP\n// - i=1 -> RIGHT\n// - i=2 -> BOTTOM\n// - i=3 -> LEFT\nconst coefTab = [{'x':0,'y':-1},{'x':1,'y':0},{'x':0,'y':1},{'x':-1,'y':0}];\n\n// - Box object\nfunction Box(jquerySelector) {\n  this.box       = jquerySelector;\n  this.isPlay    = false;\n  this.ship      = 0;\n  this.className = 'default';\n}\n\n// - Modifie la couleur d'une case\nBox.prototype.color = function(className) {\n  this.box.removeClass(String(this.className)).addClass(String(className));\n  this.className = className;\n};\n\n// - Lorsque une case est joue\nBox.prototype.play = function(className) {\n  this.isPlay = true;\n  this.box.removeClass(String(this.className)).addClass(String(className));\n  this.className = className;\n};\n\n// - Ajoute un bateau de taille 'size'\nBox.prototype.addShip = function(size, className){\n  this.ship = size;\n  this.box.removeClass(String(this.className)).addClass(String(className));\n  this.className = className;\n};\n\n// - Retourne un nombre al√©atoire entre min et max\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random()*max+min);\n}\n\n// - Initialize grid attributs\nfunction initAttributGrid() {\n  $('.grid1, .grid2').each(function(n){\n    $('.grid'+String(n+1)+' .box').each(function(index) {\n      $(this).attr('data-x', index%gridSize);\n      $(this).attr('data-y', parseInt(index/gridSize));\n      $(this).attr('grid-n', n+1);\n    });\n  });\n}\n\n// - Create a new grid\nfunction newGrid(nGrid) {\n  var grid = [];\n\n  $('.grid'+String(nGrid)+' .box').each(function(index){\n    grid[index] = new Box($(this));\n  });\n  return grid;\n}\n\n// - Put one ship in grid\nfunction putOneShip(grid, x, y, dir, shipID) {\n  var\n    size  = shipConst[shipID].size,\n    coefX = 0,\n    coefY = 0;\n\n  for (var i = 0; i < size; i++) {\n    coefX = i*coefTab[dir].x;\n    coefY = i*coefTab[dir].y;\n    // Put ship on box(x,y)\n    grid[(x+coefX)+(y+coefY)*gridSize].addShip(shipConst[shipID].size, shipConst[shipID].name);\n  }\n}\n\n// - Retourne un tableau avec les directions possibles\nfunction getPossibleDir(x, y, grid, shipID) {\n  var\n    possibleDir = [true, true, true, true],\n    shipSize    = shipConst[shipID].size;\n\n  coefTab.forEach(function(value, index) { // for all direction\n    for (var i = 0; i < shipSize; i++) {\n      if ((x+(i*value.x) < 0 || y+(i*value.y) < 0 || x+(i*value.x) > 9 || y+(i*value.y) > 9)) {\n        possibleDir[index] = false;\n      }\n    }\n  });\n  possibleDir.forEach(function(value, index) { // for all possible directions\n    if (value) {\n      for (var i = 0; i < shipSize; i++) {\n        if (grid[(x+(i*coefTab[index].x))+(y+(i*coefTab[index].y))*gridSize].ship !== 0) {\n          possibleDir[index] = false;\n        }\n      }\n    }\n  });\n  return possibleDir;\n}\n\n// - Clear une grille\nfunction clearGrid(grid) {\n  var gridID = grid[0].box.attr('grid-n');\n  $('.grid'+gridID+' .box').each(function(index){\n    if (!grid[index].ship) {\n      grid[index].color('default');\n    }\n  });\n}\n\nfunction getDir(firstX, firstY, clickX, clickY, grid, shipID) {\n  var\n    shipSize = shipConst[shipID].size,\n    dir      = -1,\n    check    = true;\n\n  if (firstY === clickY && clickX+(shipSize-1) === firstX) {\n    dir = 3; // left\n  }\n  if (firstY === clickY && firstX+(shipSize-1) === clickX) {\n    dir = 1; // right\n  }\n  if (firstX === clickX && firstY+(shipSize-1) === clickY) {\n    dir = 2; // bottom\n  }\n  if (firstX === clickX && clickY+(shipSize-1) === firstY) {\n    dir = 0; // top\n  }\n  if (dir != -1) {\n    for (var i = 0; i < shipSize; i++) {\n      if (grid[(coefTab[dir].x*i+firstX)+(coefTab[dir].y*i+firstY)*gridSize].ship) {\n        check = false;\n      }\n    }\n  }\n  dir = check ? dir : -1;\n  return dir;\n}\n\nfunction onClickPositionPhase(grid, shipID, clickX, clickY, saveX, saveY) {\n  var\n    firstX    = 0,\n    firstY    = 0,\n    dirTab    = getPossibleDir(clickX, clickY, grid, shipID),\n    boatIsPut = false,\n    dir       = -1,\n    className = '';\n\n  // console.log(clickX, clickY, saveX, saveY);\n  if (saveX.length > 1 && saveY.length > 1) { // player click on <1 boxes\n    firstX = saveX[saveX.length-2];\n    firstY = saveY[saveY.length-2];\n    // selected box is not a ship\n    if (!grid[firstX+firstY*gridSize].ship && !grid[clickX+clickY*gridSize].ship) {\n      // get direction of selected boxes\n      dir = getDir(firstX, firstY, clickX, clickY, grid, shipID);\n      if (dir != -1) {\n        // put one ship in grid\n        putOneShip(grid, firstX, firstY, dir, shipID);\n        shipID++;\n        boatIsPut = true;\n      }\n    }\n  }\n  clearGrid(grid);\n  if (!boatIsPut) { // Display possible selection\n    dirTab.forEach(function(value, index){\n      if (value) {\n        for (var i = 0; i < shipConst[shipID].size; i++) {\n          className = (i === shipConst[shipID].size-1) ? 'possible' : 'clicked';\n          grid[(clickX+(i*coefTab[index].x))+(clickY+(i*coefTab[index].y))*gridSize].color(className);\n        }\n      }\n    });\n  }\n  return shipID;\n}\n\nfunction computerPlay(grid) {\n  var\n    randX = randomNumber(0, gridSize),\n    randY = randomNumber(0, gridSize);\n\n  while (grid[randX+randY*gridSize].isPlay) {\n    randX = randomNumber(0, gridSize);\n    randY = randomNumber(0, gridSize);\n  }\n  if (grid[randX+randY*gridSize].ship) {\n    grid[randX+randY*gridSize].play('played_ship');\n  } else {\n    grid[randX+randY*gridSize].play('played_nothing');\n  }\n}\n\nfunction onClickGamePhase(playerGrid, computGrid, clickX, clickY) {\n  if (!computGrid[clickX+clickY*gridSize].isPlay) {\n    if (computGrid[clickX+clickY*gridSize].ship) {\n      computGrid[clickX+clickY*gridSize].play('played_ship');\n    } else {\n      computGrid[clickX+clickY*gridSize].play('played_nothing');\n    }\n    computerPlay(playerGrid);\n  }\n}\n\n// - Gestion du click sur la grille du joueur\nfunction clickOnPlayerGrid(playerGrid, computGrid) {\n  var\n    shipID = 0,\n    saveX  = [],\n    saveY  = [];\n\n  // Si les bateaux ne sont pas placer les faire placer au joueur\n  $('.grid2 .box').click(function() {\n    var\n      clickX = parseInt($(this).attr('data-x')),\n      clickY = parseInt($(this).attr('data-y'));\n\n    saveX.push(clickX); // Save click coordinates\n    saveY.push(clickY);\n    if (shipID < shipConst.length) {\n      shipID = onClickPositionPhase(playerGrid, shipID, clickX, clickY, saveX, saveY);\n    }\n    else {\n      $('.grid1 .box').click(function() {\n        var\n          clickX = parseInt($(this).attr('data-x')),\n          clickY = parseInt($(this).attr('data-y'));\n        onClickGamePhase(playerGrid, computGrid, clickX, clickY);\n      });\n    }\n  });\n}\n\nfunction displayGrid(grid) {\n  grid.forEach(function(value, index) {\n    if (!value.play) {\n      if (!value.ship) {\n        value.color('played_nothing');\n      } else {\n        value.color('played_ship');\n      }\n    } else {\n      value.color('default');\n    }\n  });\n}\n\nfunction possibleToPutShip(x, y, grid, shipID) {\n  var\n    check  = false,\n    dirTab = getPossibleDir(x, y, grid, shipID);\n\n  for (var i = 0; i < dirTab.length; i++) {\n    if (!dirTab[i]) {\n      check = true;\n    }\n  }\n  return check;\n}\n\nfunction getSelectDir(dirTab) {\n  var randDir = randomNumber(0, dirTab.length-1);\n\n  while (!dirTab[randDir]) {\n    randDir = randomNumber(0, dirTab.length-1);\n  }\n  return randDir;\n}\n\n// - Ajoute de facon aleatoire tout les bateaux dans la grille\nfunction putRandShips(grid) {\n  var\n    maxLoop = 0,\n    randX   = randomNumber(0, gridSize),\n    randY   = randomNumber(0, gridSize),\n    dirTab  = [];\n\n  shipConst.forEach(function(value, index) {\n    // Get possible coordinates\n    while (grid[randX+randY*gridSize].ship &&\n      possibleToPutShip(randX, randY, grid, index) &&\n      maxLoop < 1000) {\n      randX = randomNumber(0, gridSize);\n      randY = randomNumber(0, gridSize);\n      maxLoop++;\n    }\n    dirTab = getPossibleDir(randX, randY, grid, index); // get possible direction\n    putOneShip(grid, randX, randY, getSelectDir(dirTab), index); // add ship in grid\n  });\n}\n\n// - Main function\nfunction mainGame()\n{\n  var\n    playerGrid = newGrid(2),\n    computGrid = newGrid(1);\n\n  initAttributGrid();\n  putRandShips(computGrid);\n  clickOnPlayerGrid(playerGrid, computGrid);\n  displayGrid(computGrid);\n}\n\n//  - Clone la premiere grille du DOM\n$(function(){\n    $('.grid1>div').clone().appendTo('.grid2');\n    mainGame();\n});\n","(function($){\n    $.fn.isolatedScroll = function( options ){\n        \"use script\";\n        defaults = {\n            // only blocks scroll if area is scrollable, set to false to always disable other element scroll\n            autoscroll: true\n        }\n        options = $.extend( defaults, options );\n\n        return this.bind( 'touchmove mousewheel DOMMouseScroll', function ( e ) {\n            if( !options.autoscroll || ($(this).outerHeight() < $(this)[0].scrollHeight) ) {\n                var e0 = e.originalEvent,\n                    delta = e0.wheelDelta || -e0.detail;\n\n                this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;\n                e.preventDefault();\n            }\n        });\n    };\n}(jQuery));\n\n$(window).load(function() {\n    console.log('loaded -- sourcemap OK ?');\n    var timer = null;\n    var wheeling = false;\n    $('.flexslider').isolatedScroll();\n    $('.flexslider').flexslider({\n        animation: \"slide\",\n        selector: \".boats > .boat\",\n        animationLoop: false,\n        mousewheel: false,\n        slideshow: false,\n        slideshowSpeed: 2000,\n        reverse: true,\n        itemWidth: 210,\n        minItems: 1,\n        maxItems: 1,\n        move: 0,\n        itemMargin: 5,\n        start: function(slider) {\n            var timer = null;\n            var wheeling = false;\n            $('.flexslider').on('mousewheel', function(event, delta, deltaX, deltaY){\n                  if(timer){\n                    clearTimeout(timer);\n                  }\n                  if(!wheeling){\n                    var target = delta < 0 ? slider.getTarget('next') : slider.getTarget('prev');\n                    slider.flexAnimate(target, true);\n                  }\n                  wheeling = true;\n                  timer = setTimeout(function(){\n                    wheeling = false;\n                }, 300);\n            });\n        }\n    });\n    var i = 0;\n    $(\"#add\").click(function(){\n        div = \"<li class='boat'><span>\"+i+\". Number what?</span></li>\";\n        $('.flexslider').data('flexslider').addSlide($(div));\n        i++;\n    });\n});\n"],"sourceRoot":"/source/"}